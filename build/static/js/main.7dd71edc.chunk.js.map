{"version":3,"sources":["store/configureStore.js","Components/Client/Client.js","Components/GameOver/GameOVer.js","Components/Words/Words.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","rootReducer","combineReducers","firebaseReducer","firestoreReducer","store","createStore","compose","devToolsEnhancer","rrfProps","config","userProfile","useFirestoreForProfile","dispatch","createFirestoreInstance","firestoreConnect","collection","connect","state","props","client","ordered","details","history","useState","nums","setNums","answer","setAnswer","life","setLife","scoree","setScoree","quesNum","setQuesNum","time","setTime","useEffect","randomingData","setInterval","t","copyN","i","length","push","j","Math","floor","random","k","handleClick","a","b","toLowerCase","trim","s","aler","alert","update","doc","score","record","l","q","className","Q","undefined","Notes","map","n","style","color","Form","onSubmit","e","preventDefault","A","Group","controlId","Control","autoComplete","type","placeholder","value","onChange","target","Button","onClick","Spinner","animation","to","toFixed","id","setId","clientInUse","setClientInUse","setType","ques","setQues","ans","setAns","notes","setNotes","autoSave","item","searchingArr","filter","cl","searching","Table","striped","bordered","hover","size","c","num","wordUpdating","note","ListGroup","variant","Item","name","defaultChecked","autoFocus","newNotes","splice","newWord","no","add","App","Container","path","exact","component","Client","GameOVer","Words","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dd71edc.chunk.js","sourcesContent":["import {createStore, combineReducers, compose} from 'redux'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/storage'\r\nimport 'firebase/firestore'\r\nimport {firebaseReducer} from 'react-redux-firebase'\r\nimport {devToolsEnhancer} from 'redux-devtools-extension'\r\nimport {createFirestoreInstance, firestoreReducer} from 'redux-firestore'\r\n\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBYnpYXMg7q3rsTdFpF0VaeWKTCDA3YaQw\",\r\n  authDomain: \"vocab-e7c56.firebaseapp.com\",\r\n  projectId: \"vocab-e7c56\",\r\n  storageBucket: \"vocab-e7c56.appspot.com\",\r\n  messagingSenderId: \"397124374355\",\r\n  appId: \"1:397124374355:web:0c5d27a73b98f86ecf1ba6\",\r\n  measurementId: \"G-QVQ7RTYHKX\"\r\n};\r\n\r\n\r\n// react-redux-firebase config\r\nconst rrfConfig = {\r\n    userProfile: 'users',\r\n    useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\r\n}\r\n\r\n\r\n  firebase.initializeApp(firebaseConfig)\r\n\r\n\r\n  firebase.firestore() // <- needed if using firestore\r\n\r\n\r\n  // Add firebase to reducers\r\n    const rootReducer = combineReducers({\r\n    firebase: firebaseReducer,\r\n    firestore: firestoreReducer // <- needed if using firestore\r\n  })\r\n\r\n\r\n  const initialState = {}\r\n  const store = createStore(rootReducer, initialState, compose(devToolsEnhancer()))\r\n\r\n\r\n\r\n  export default store;\r\n\r\n\r\n  export const rrfProps = {\r\n    firebase,\r\n    config: rrfConfig,\r\n    dispatch: store.dispatch,\r\n    createFirestoreInstance // <- needed if using firestore\r\n  }","import React, {useState, useEffect} from 'react'\r\nimport {Button, Spinner} from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport {Form} from 'react-bootstrap'\r\nimport './Client.css'\r\n\r\nconst Client = props => {\r\n\r\n    const {client, history, details, firestore} = props\r\n    const [nums, setNums] = useState([0]) ;\r\n    const [answer, setAnswer] = useState('')\r\n    const [life, setLife] = useState(3)\r\n    const [scoree, setScoree] = useState(0)\r\n    const [quesNum, setQuesNum] = useState(0)\r\n    const [time, setTime] = useState(0)\r\n\r\n    useEffect(()=>{\r\n        if(client){\r\n            randomingData();\r\n            setInterval(() => {\r\n                setTime(t=>t+1)\r\n                \r\n            }, 1000);\r\n        }\r\n    },[client])\r\n    \r\n    const randomingData = () => {\r\n        const copyN = []\r\n        for(let i = 0; i < client.length; i++){\r\n            copyN.push(i)\r\n        }\r\n        for (let i = copyN.length -1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * i)\r\n            let k = copyN[i]\r\n            copyN[i] = copyN[j]\r\n            copyN[j] = k\r\n        }\r\n        setNums(copyN)\r\n    }\r\n    \r\n    const handleClick = (a, b) => {\r\n        \r\n        if(answer.length === 0){\r\n            alert('You should write your answer')\r\n            return\r\n        }\r\n        if(a.toLowerCase() === answer.trim().toLowerCase()){\r\n            setScoree(s => s+1)\r\n        }\r\n        else{\r\n            let aler =`${a} --- ${b}`; \r\n            alert(aler)\r\n            if(life === 1){\r\n                firestore.update({collection : 'details', doc: 'details'}, {score : scoree, time : time})\r\n                if(details[0].record < scoree){\r\n                    history.push('/gameover')\r\n                    firestore.update({collection : 'details', doc : 'details'}, {record : scoree})\r\n                    return\r\n                }\r\n                history.push('/gameover')\r\n                return\r\n            }\r\n            setLife(l=>l-1)\r\n        }\r\n        if(quesNum >= nums.length-1){\r\n            randomingData();\r\n            setQuesNum(0);\r\n            setAnswer('');\r\n            return\r\n        }\r\n        setQuesNum(q=>q+1)\r\n        setAnswer('')\r\n    }\r\n\r\n    if(client && details){\r\n        \r\n        return (\r\n            <>\r\n                {\r\n                    <div className='contain'>\r\n                        <div className='head'>\r\n                            <h3>Record : {details.[0].record}</h3>\r\n                            <h4>Score : {scoree}</h4>\r\n                            <h5>Life : {life}</h5>\r\n                        </div>\r\n\r\n                        <p>{client[nums[quesNum]].Q}</p>\r\n                        {client[nums[quesNum]].Notes !== undefined ? client[nums[quesNum]].Notes.map(n=>(\r\n                            <p style={{color:\"orange\"}}>({n})</p>\r\n                        )) : ''}\r\n                        <Form onSubmit={(e)=>{\r\n                            e.preventDefault() \r\n                            handleClick(client[nums[quesNum]].A, client[nums[quesNum]].Q)}}>\r\n                            <Form.Group controlId=\"firstName\">\r\n                                <Form.Control\r\n                                className='answer-input'\r\n                                autoComplete='off' \r\n                                type=\"text\" \r\n                                placeholder=\"Enter answer\"\r\n                                value={answer}\r\n                                onChange={e=>setAnswer(e.target.value.trim())} />\r\n                            </Form.Group>\r\n\r\n                            <Button onClick={()=>handleClick(client[nums[quesNum]].A)}> Submit </Button>\r\n                        </Form>\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n    }else{\r\n        return <div className=\"contain\"><Spinner animation=\"border\" /></div>\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    firestoreConnect([{collection : 'client'}, {collection : 'details'}]),\r\n    connect((state, props)=>({\r\n        client : state.firestore.ordered.client,\r\n        details : state.firestore.ordered.details\r\n    }))\r\n)(Client)","import React from 'react';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\nimport {NavLink} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport './GameOver.css'\r\n\r\nconst GameOVer = (props) => {\r\n  const {history, details} = props\r\n  if(details){\r\n    return (\r\n      <div className='game-over-container'>\r\n        <NavLink to='/words'>\r\n          <Button>Add or Change words</Button>\r\n        </NavLink>\r\n        <div>\r\n          <h2 style={{color: 'red'}}>Game Over</h2>\r\n  \r\n          <div>\r\n            <div className='stats'>Your score is <span className=\"statistics\">{details[0].score}</span></div>\r\n            <div className='stats'>Time per word <span className=\"statistics\">{details[0].score === 0 ? details[0].time : (details[0].time/details[0].score).toFixed(2)}s</span></div>\r\n            <div className='stats'>Record is <span className='statistics'>{details[0].record}</span></div>\r\n          </div>\r\n        </div>\r\n        <Button className='game-over-btn' onClick={()=>history.push('/')}>Again</Button>\r\n      </div>\r\n    );\r\n  }else{\r\n    return <div className=\"contain\"><Spinner animation=\"border\" /></div>\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  firestoreConnect([{collection : 'details'}]),\r\n  connect((state, props)=>({\r\n      details : state.firestore.ordered.details\r\n  }))\r\n)(GameOVer)\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Table, Spinner, ListGroup, Button} from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport './Words.css'\r\n\r\nconst Words = (props) => {\r\n    const {client, firestore} = props\r\n    const [id, setId] = useState(false)\r\n    const [clientInUse, setClientInUse] = useState([])\r\n    const [type, setType] = useState('(n)')\r\n    const [ques, setQues] = useState('')\r\n    const [ans, setAns] = useState('')\r\n    const [notes, setNotes] = useState([])\r\n\r\n    useEffect(()=>{\r\n        if(client){\r\n            setClientInUse(client)\r\n        }\r\n    }, client)\r\n\r\n    const addingNote = () => {\r\n        setNotes([...notes,\r\n            {\r\n                num : notes.length,\r\n                value : \"\"\r\n            }\r\n        ])\r\n    }\r\n    const handleSaving = () => {\r\n        if(ques.trim().length === 0 || ans.trim().length === 0){\r\n            alert('Write question and answer')\r\n            return\r\n        }\r\n        const newWord = {\r\n            Q : `${ques.trim() + \" \" + type}`,\r\n            A : ans,\r\n            Notes : notes.filter(no=>no.value.trim().length>0).map(n=>n.value)\r\n        }\r\n        if(!id){\r\n            firestore.add({collection : 'client'}, newWord)\r\n            setQues('')\r\n            setAns('')\r\n            setNotes([])\r\n            return\r\n        }\r\n        if(id){\r\n            firestore.update({collection : 'client', doc : id}, newWord)\r\n            setQues('')\r\n            setAns('')\r\n            setNotes([])\r\n            setId(false)\r\n        }\r\n    }\r\n\r\n    const searching = (item) => {\r\n        const searchingArr = client.filter(cl=> item.trim().toLowerCase() === cl.A.trim().toLowerCase())\r\n        setClientInUse(item.trim().length >0 ? searchingArr : client)\r\n    }\r\n    \r\n    const wordUpdating = (cl) => {\r\n        setId(cl.id)\r\n        setType('')\r\n        setQues(cl.Q)\r\n        setAns(cl.A)\r\n        setNotes(cl.Notes ? cl.Notes.map((c,i)=> {return {num : i, value : c}}) : [])\r\n    }\r\n\r\n  if(client){\r\n      return (\r\n        <div className='words-container'>\r\n            <input\r\n            className='search' \r\n            type=\"text\"\r\n            autoComplete='off'\r\n            autoSave='off'\r\n            placeholder='searching word...'\r\n            onChange={e=>searching(e.target.value)} />\r\n            <div className='tableFixHead'>\r\n            <Table striped bordered hover size='sm'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Question</th>\r\n                            <th>Answer</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className='table-body'>\r\n                        {clientInUse.map(cl=>(\r\n                            <tr onClick={()=>wordUpdating(cl)}>\r\n                                <td>{cl.Q}</td>\r\n                                <td>{cl.A}</td>\r\n                                <td>{cl.Notes !== undefined ? cl.Notes.map(note=> (\r\n                                    <div>\r\n                                        {note} <br />\r\n                                    </div>\r\n                                )) : \"\"}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n\r\n            <h5>Total number of words is {client.length}</h5>\r\n\r\n            <div className='word-form'>\r\n                <ListGroup variant=\"flush\">\r\n                    <ListGroup.Item variant='success'>\r\n                        <h4>Word Form</h4>\r\n                        <Button onClick={()=>{\r\n                            setId(false)\r\n                            setQues('')\r\n                            setAns('')\r\n                            setNotes([])\r\n                        }} variant='success'>New Word</Button>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item variant=\"primary\">\r\n                        Type <hr />\r\n                        <div className='type-radio'>\r\n                            <input  \r\n                            type=\"radio\" \r\n                            value=\"(n)\" \r\n                            name=\"gender\" \r\n                            defaultChecked\r\n                            onClick={e=>setType(e.target.value)} /> Noun\r\n                        </div>\r\n                        <div className='type-radio'>\r\n                            <input \r\n                            type=\"radio\" \r\n                            value=\"(adj)\" \r\n                            name=\"gender\"\r\n                            onClick={e=>setType(e.target.value)} /> Adj\r\n                        </div>\r\n                        <div className='type-radio'>\r\n                            <input  \r\n                            type=\"radio\" \r\n                            value=\"(v)\" \r\n                            name=\"gender\"\r\n                            onClick={e=>setType(e.target.value)} /> Verb\r\n                        </div>\r\n                        <div className='type-radio'>\r\n                            <input  \r\n                            type=\"radio\" \r\n                            value=\"(adv)\" \r\n                            name=\"gender\"\r\n                            onClick={e=>setType(e.target.value)} /> Adv\r\n                        </div>\r\n                        <div className='type-radio'>\r\n                            <input \r\n                            type=\"radio\" \r\n                            value=\"\" \r\n                            name=\"gender\"\r\n                            onClick={e=>setType(e.target.value)} /> None\r\n                        </div>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item variant=\"danger\">\r\n                        Question <br />\r\n                        <input \r\n                        className='question' \r\n                        type=\"text\" \r\n                        autoComplete='off' \r\n                        autoFocus\r\n                        value={ques}\r\n                        onChange={e=>setQues(e.target.value)} />\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item variant=\"warning\">\r\n                        Answer <br />\r\n                        <input \r\n                        className='answer' \r\n                        type=\"text\" \r\n                        autoComplete='off'\r\n                        value={ans}\r\n                        onChange={e=>setAns(e.target.value)} />\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item variant=\"dark\">\r\n                        Notes <br />\r\n                        {notes.map(n=>(\r\n                            <div>\r\n                                <input\r\n                                className='note' \r\n                                type=\"text\" \r\n                                autoComplete='off'\r\n                                value={n.value}\r\n                                onChange={e=>{\r\n                                    const newNotes = [...notes]\r\n                                    newNotes.splice(n.num,1,{\r\n                                        num : n.num,\r\n                                        value : e.target.value\r\n                                    })\r\n                                    setNotes(newNotes)\r\n                                }} />\r\n                            </div>\r\n                        ))}\r\n                        <Button onClick={addingNote} size='sm'>Add note</Button>\r\n                    </ListGroup.Item>\r\n                    <Button variant=\"success\" onClick={handleSaving}>Save</Button>\r\n                </ListGroup>\r\n            </div>\r\n        </div>\r\n        );\r\n    }else{\r\n        return <div className=\"contain\"><Spinner animation=\"border\" /></div>\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    firestoreConnect([{collection : 'client'}]),\r\n    connect((state, props)=>({\r\n        client : state.firestore.ordered.client\r\n    }))\r\n  )(Words)\r\n","import React from 'react'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport {Container} from 'react-bootstrap'\nimport store, { rrfProps } from './store/configureStore'\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase'\nimport {Provider} from 'react-redux'\nimport Client from './Components/Client/Client'\nimport GameOVer from './Components/GameOver/GameOVer'\nimport './App.css'\nimport Words from './Components/Words/Words'\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider {...rrfProps} >\n        <Router>\n          <Container>\n            <Switch>\n              <Route path='/' exact component={Client} />\n              <Route path='/gameover' exact component={GameOVer} />\n              <Route path='/words' exact component={Words} />\n            </Switch>\n          </Container>\n        </Router>\n      </ReactReduxFirebaseProvider>\n    </Provider>\n  )\n}\n\nexport default App\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}